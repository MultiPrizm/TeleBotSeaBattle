import threading
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command

from Core import *

logging.basicConfig(level=logging.INFO)

bot = Bot("")

dp = Dispatcher()

init(bot)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):

    await message.answer("‚úã–í—ñ—Ç–∞—é –≤–∞—Å —É –º–æ—î–º—É –±–æ—Ç—ñ\n‚öì–Ø –± —Ö–æ—Ç—ñ–≤ –ø—Ä–µ–∑–µ–Ω—Ç—É–≤–∞—Ç–∏ –≤–∞–º —Å–≤–æ—é –≥—Ä—É, –º–æ—Ä—Å—å–∫–∏–π –±—ñ–π.\n\n–¶–µ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–Ω–∞ –≥—Ä–∞, —Ç–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —è–∫ –º—ñ–Ω—ñ–º—É–º –¥–≤–æ—î –≥—Ä–∞–≤—Ü—ñ–≤ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –¥–µ–≤–∞–π—Å–∞—Ö.\n–¶–µ –±–µ—Ç–∞ –≤–µ—Ä—Å—ñ—è —Ç–æ–º—É –º–æ–∂—É—Ç—å –±—É—Ç–∏ –±–∞–≥–∏ –º–æ–∂–∏—Ç–µ –ø–æ–≤—ñ—Ç–æ–º–∏—Ç–∏ –ø—Ä–æ –Ω–∏—Ö –º–µ–Ω—ñüëâ@multy_prizm")
    await message.answer("‚ùì–Ø–∫ –≥—Ä–∞—Ç–∏:\n\n–©–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É –Ω–∞–ø–∏—à—ñ—Ç—å /go\nüöÄ–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç—Ä—ñ–ª –Ω–∞–ø–∏—à—ñ—Ç—å —É —á–∞—Ç –±—É–∫–≤—É —ñ —Ü–∏—Ñ—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏\nüì°–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–∞–¥—ñ–æ –∑–≤'—è–∑–æ–∫ /radio —â–æ–± –±—É—Ç–∏ –≤–∫—É—Ä—Å—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ\n\nüñ•–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≥—Ä–∞—Ç–∏ –∑ –∫–æ–º–ø'—é—Ç–µ—Ä–∏ —á–∏ –Ω–æ—É–¥–±—É–∫–∞")

    if not message.chat.id in Conections:
        Conections.append(message.chat.id)

@dp.message(Command("info"))
async def cmd_start(message: types.Message):

    await message.answer("‚ùì–Ø–∫ –≥—Ä–∞—Ç–∏:\n\n–©–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É –Ω–∞–ø–∏—à—ñ—Ç—å /go\nüöÄ–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç—Ä—ñ–ª –Ω–∞–ø–∏—à—ñ—Ç—å —É —á–∞—Ç –±—É–∫–≤—É —ñ —Ü–∏—Ñ—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏\nüì°–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–∞–¥—ñ–æ –∑–≤'—è–∑–æ–∫ /radio —â–æ–± –±—É—Ç–∏ –≤–∫—É—Ä—Å—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ\n\nüñ•–ì—Ä–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—è —Ç—ñ–ª—å–∫–∞ –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–∏ —á–∏ –Ω–æ—É–¥–±—É–∫–∏")

    if not message.chat.id in Conections:
        Conections.append(message.chat.id)

@dp.message(Command("go"))
async def cmd_start(message: types.Message):

    if not message.chat.id in IndexDict and not message.from_user.first_name in LineDict:

        LineDict[message.from_user.first_name] = message.chat.id

        await message.answer("‚öì–¢–≤—ñ–π —Ñ–ª–æ—Ç –≤–∏–π—à–æ–≤ –∑ –ø–æ—Ä—Ç—É –≤ –ø–æ—à—É–∫–∞—Ö –Ω–µ–ø—Ä–∏—î–º–Ω–æ—Å—Ç–µ–π\nüì°–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /radio —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —á–∏ –≤—Å–µ –¥–æ–±—Ä–µ")
    else:
        await message.answer("üõë–¢–∏ –≤–∂–µ —É –≥—Ä—ñ")
    
    if not message.chat.id in Conections:
        Conections.append(message.chat.id)

@dp.message(Command("exit"))
async def cmd_start(message: types.Message):

    if message.chat.id in IndexDict and not message.from_user.first_name in LineDict:

        IndexDict[message.chat.id].exit(message.chat.id)

        await message.answer(IndexDict[message.chat.id].out(message.chat.id))
    else:
        await message.answer("üõë–¢–∏ –Ω–µ —É –≥—Ä—ñ\n/go - —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É")
    
    if not message.chat.id in Conections:
        Conections.append(message.chat.id)

@dp.message(Command("Code3478632784798356341783246389"))
async def cmd_start(message: types.Message):

    text = "‚ÄºÔ∏è–ù–∞–¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç–∞ –≤–∏–º–∫–Ω–µ–Ω–æ‚ÄºÔ∏è\n\n–ü–æ–¥—è–∫–∞ –≤—ñ–¥ @multy_prizm –∑–∞, —â–æ –ø—Ä–∏–π–Ω—è–ª–∏ —É—á–∞—Å—Ç—å —É –±–µ—Ç–∞ —Ç–µ—Å—Ç—ñ."

    for i in Conections:
        await bot.send_message(i, text)


@dp.message(Command("radio"))
async def cmd_start(message: types.Message):

    if message.chat.id in IndexDict:
        text = IndexDict[message.chat.id].out(message.chat.id)

        if text != "":
            text = text.split("%")

        if text != "" and type(text) == type([]):
            for i in text:
                await message.answer(i)
        elif text != "":
            await message.answer(text)
        else:
            await message.answer("üì°–ù–µ–º–∞—î –Ω–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")

    elif message.from_user.first_name in LineDict:
        await message.answer("üì°–í—Å–µ –¥–æ–±—Ä–µ, –ø–æ–∫–∏—â–æ")

    else:
        await message.answer("üõë–¢–∏ –Ω–µ —É –≥—Ä—ñ\n/go - —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É")
    
    for i in Conections:

        if i in IndexDict:
            text = IndexDict[i].out(i)

            if text != "":
                text = text.split("%")

            if text != "" and type(text) == type([]):
                for s in text:
                    await bot.send_message(i, s)
            elif text != "":
                await bot.send_message(i, text)
    
    if not message.chat.id in Conections:
        Conections.append(message.chat.id)

@dp.message()
async def echo(message: types.Message):
    
    text = message.text.lower()

    if message.chat.id in IndexDict:
        if not IndexDict[message.chat.id].end:
            if IndexDict[message.chat.id].check_status(message.chat.id):
                if IndexDict[message.chat.id].check_status(message.chat.id):
                    if len(text) <= 3 and len(text) > 1:
                        if text[0] in "abcdefghij":

                            if text in "0" and text in "1":

                                IndexDict[message.chat.id].put_mess(message.chat.id, text)
                                await message.answer("üöÄ–í–æ–≥–æ–Ω—å "+ message.text)
                                await message.answer("üö®–£–≤–∞–≥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≥–æ—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
                            
                            if text[1] in "123456789":
                                IndexDict[message.chat.id].put_mess(message.chat.id, text)
                                await message.answer("üöÄ–í–æ–≥–æ–Ω—å "+ message.text)
                                await message.answer("üö®–£–≤–∞–≥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≥–æ—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å")

                        else:
                            await message.answer("üõë–ù–µ–∫–æ—Ä–µ–∫—Ç—Ä—ñ –∫–æ—Ä–¥–∏–Ω–∞—Ç–∏")
                    else:
                        await message.answer("üõë–ù–µ–∫–æ—Ä–µ–∫—Ç—Ä—ñ –∫–æ—Ä–¥–∏–Ω–∞—Ç–∏")
            else:
                await message.answer("üõë–ó–∞—Ä–∞–∑ —á–µ—Ä–≥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")
        else:
            await message.answer(IndexDict[message.chat.id].out(message.chat.id))
    else:
        await message.answer("üõë–¢–∏ –Ω–µ —É –≥—Ä—ñ\n/go - —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É")
    
    if not message.chat.id in Conections:
        Conections.append(message.chat.id)

async def main():
    await dp.start_polling(bot)

def runBot():
    asyncio.run(main())


threading.Thread(target=runBot).start()
threading.Thread(target=foo).start()
threading.Thread(target=selection).start()
threading.Thread(target=Processing).run()